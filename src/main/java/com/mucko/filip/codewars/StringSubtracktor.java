package com.mucko.filip.codewars;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

public class StringSubtracktor {

    static Set<Integer> subtractStrings() throws IOException {
        File file = new File("C:\\Users\\mucko.fil\\Documents\\LocalRep\\CodeWars\\src\\main\\resources\\alertc");

        BufferedReader br = new BufferedReader(new FileReader(file));
        Set<Integer> warningLevel_1 = new HashSet<>();
        String st;
        while ((st = br.readLine()) != null) {
            warningLevel_1.add(Integer.valueOf(st));
        }

        Integer numberOfAlertC = warningLevel_1.size();

        List<Integer> warningLevel_2 = Arrays
            .asList(1, 2, 11, 12, 16, 24, 25, 28, 56, 61, 62, 70, 71, 72, 73, 81, 83, 101, 102, 103, 104, 105, 106, 107,
                108, 109, 110, 111, 112, 113, 114, 115,
                116, 117, 118, 119, 120, 121, 129, 130, 131, 132, 133, 134, 200, 201, 202, 203, 204, 205, 206, 207, 208,
                210, 211, 212, 213, 214, 215,
                216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
                237, 238, 239, 240, 244, 249,
                250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
                271, 272, 273, 274, 275, 276,
                277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
                298, 299, 300, 301, 302, 310,
                311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 330, 331, 332, 335, 336, 337, 338, 339, 340,
                341, 342, 344, 345, 346, 347,
                348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 375, 376,
                377, 379, 381, 383, 386, 389,
                390, 397, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
                421, 422, 423, 424, 425, 426,
                427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
                448, 449, 450, 451, 452, 453,
                454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 471, 474, 478, 479, 480, 481, 482, 483,
                484, 492, 493, 494, 495, 496,
                497, 498, 499, 510, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
                538, 539, 540, 541, 546, 547,
                548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 576, 577, 578, 579, 580,
                581, 582, 583, 584, 585, 586,
                587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 604, 605, 606, 607, 608, 609, 614, 615, 616, 617, 618,
                619, 626, 627, 628, 629, 639,
                640, 642, 643, 648, 650, 651, 652, 653, 654, 655, 656, 665, 666, 675, 676, 679, 681, 710, 711, 712, 713,
                714, 715, 716, 717, 718, 719,
                720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 735, 749, 750, 751, 752, 753, 754, 755, 756, 757,
                758, 759, 760, 761, 762, 763,
                764, 765, 766, 767, 768, 769, 770, 782, 783, 784, 785, 786, 787, 788, 799, 805, 812, 813, 814, 818, 819,
                820, 825, 826, 827, 828, 829,
                830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 845, 848, 851, 852, 862, 899, 900, 901, 903, 904,
                905, 907, 909, 910, 911, 912,
                913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
                937, 938, 939, 940, 941, 942,
                943, 944, 945, 946, 947, 948, 949, 950, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
                968, 969, 972, 973, 974, 975,
                976, 977, 978, 979, 981, 983, 985, 988, 993, 995, 996, 997, 1004, 1005, 1009, 1010, 1011, 1012, 1013,
                1014, 1015, 1016, 1021, 1022,
                1023, 1027, 1028, 1029, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1049, 1051, 1052, 1062, 1063, 1064,
                1074, 1084, 1085, 1086,
                1090, 1101, 1104, 1105, 1106, 1107, 1108, 1109, 1113, 1114, 1128, 1130, 1132, 1134, 1135, 1136, 1137,
                1151, 1170, 1171, 1173,
                1174, 1177, 1178, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1251, 1252, 1253, 1300, 1304, 1305, 1308,
                1309, 1310, 1312, 1315,
                1317, 1318, 1321, 1322, 1323, 1324, 1326, 1332, 1338, 1340, 1449, 1471, 1472, 1473, 1474, 1475, 1477,
                1485, 1486, 1487, 1488,
                1489, 1490, 1491, 1494, 1495, 1497, 1498, 1499, 1500, 1511, 1514, 1515, 1517, 1518, 1519, 1520, 1521,
                1522, 1527, 1530, 1531,
                1532, 1533, 1534, 1535, 1536, 1541, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1555, 1558, 1559, 1562,
                1563, 1564, 1565, 1566,
                1567, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1586,
                1603, 1604, 1605, 1606,
                1608, 1611, 1612, 1613, 1614, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1653, 1654, 1664, 1681,
                1682, 1684, 1685, 1686,
                1687, 1688, 1689, 1700, 1709, 1740, 1741, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
                1761, 1764, 1765, 1766,
                1767, 1768, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1801, 1805, 1806, 1807, 1808, 1809, 1810,
                1811, 1812, 1819, 1820,
                1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1838, 1841, 1846, 1849, 1853,
                1854, 1858, 1863, 1870,
                1878, 1885, 1908, 1909, 1913, 1917, 1929, 1961, 1971, 1973, 1974, 1976, 1977, 1979, 1983, 1986, 2000,
                2006, 2007, 2046);

        List<Integer> warningLevel_3 = Arrays
            .asList(26, 27, 42, 63, 64, 138, 139, 140, 241, 242, 243, 245, 246, 303, 304, 305, 306, 307, 308, 309, 323,
                324, 325, 326, 327, 328, 329, 355, 359,
                369, 370, 371, 372, 373, 374, 378, 391, 392, 393, 394, 402, 470, 472, 473, 475, 476, 477, 485, 486, 487,
                488, 489, 490, 491, 507, 508,
                509, 511, 512, 520, 644, 645, 646, 649, 804, 824, 856, 857, 858, 859, 860, 861, 902, 906, 908, 923, 925,
                926, 980, 982, 984, 986, 987,
                989, 990, 991, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1017, 1018, 1019, 1020,
                1026, 1030, 1031, 1032, 1033,
                1034, 1035, 1036, 1041, 1047, 1048, 1050, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1066, 1067,
                1068, 1073, 1075, 1102,
                1103, 1110, 1111, 1176, 1201, 1202, 1301, 1302, 1303, 1307, 1319, 1320, 1325, 1337, 1476, 1478, 1480,
                1482, 1483, 1484, 1516,
                1704, 1705, 1706, 1710, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1850, 1864, 1867, 1875,
                1879, 1991, 1998, 1999,
                2042, 2044, 2045);

        List<Integer> warningLevel_4 = Arrays
            .asList(897, 1037, 1479, 1481, 1701, 1707, 1708);

        for (Integer integer : warningLevel_2) {
            if (warningLevel_1.contains(integer)) {
                warningLevel_1.remove(integer);
            } else {
                System.out.println(integer + " is not present in alertC.");
            }
        }
        for (Integer integer : warningLevel_3) {
            if (warningLevel_1.contains(integer)) {
                warningLevel_1.remove(integer);
            } else {
                System.out.println(integer + " is not present in alertC.");
            }
        }
        for (Integer integer : warningLevel_4) {
            if (warningLevel_1.contains(integer)) {
                warningLevel_1.remove(integer);
            } else {
                System.out.println(integer + " is not present in alertC.");
            }
        }

        System.out.println("warningLevel_1.size() = " + warningLevel_1.size());
        System.out.println("warningLevel_2.size() = " + warningLevel_2.size());
        System.out.println("warningLevel_3.size() = " + warningLevel_3.size());
        System.out.println("warningLevel_4.size() = " + warningLevel_4.size());

        Integer check =
            numberOfAlertC - warningLevel_1.size() - warningLevel_2.size() - warningLevel_3.size() - warningLevel_4
                .size();
        if (check != 0) {
            System.err.println("Wrong subtraction!");
            System.err.println("check = " + check);
        }

        return warningLevel_1;
    }

    public static void main(String[] args) throws IOException {
        String stringArray = Arrays.toString(subtractStrings().toArray());
        stringArray = stringArray.replace(" ","");
        System.out.println(stringArray);
    }
}
